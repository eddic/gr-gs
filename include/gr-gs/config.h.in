/*!
 * @file      config.h
 * @brief     Defines some basic parameters for the module
 * @author    Eddie Carle &lt;eddie@isatec.ca&gt;
 * @date      June 23, 2017
 * @copyright Copyright &copy; 2017 Eddie Carle. This project is released under
 *            the GNU General Public License Version 3.
 */
/* Copyright (C) 2017 Eddie Carle
 *
 * This file is part of the Guided Scrambling GNU Radio Module
 *
 * The Guided Scrambling GNU Radio Module is free software: you can
 * redistribute it and/or modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * The Guided Scrambling GNU Radio Module is distributed in the hope that it
 * will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
 * Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * The Guided Scrambling GNU Radio Module.  If not, see
 * <http://www.gnu.org/licenses/>.
 */

#ifndef GR_GS_CONFIG_HPP
#define GR_GS_CONFIG_HPP

#include <cstdint>
#include <vector>
#include <complex>
#include <string>

#ifndef GS_API
#include <gnuradio/attributes.h>
#ifdef gnuradio_gs_EXPORTS
#  define GS_API __GR_ATTR_EXPORT
#else
#  define GS_API __GR_ATTR_IMPORT
#endif
#endif

//! GNU Radio Namespace
namespace gr
{
    //! Contains all blocks for the Guided Scrambling GNU Radio Module
    namespace gs
    {
        //! Pi
        const double pi = 3.141592653589793238462643383279502884197169399375105;

        //! Type to use for basic complex numbers
        typedef std::complex<@COMPLEX_BASE@> Complex;

        //! Get a default constellation pattern for a field size
        GS_API std::vector<Complex> defaultConstellation(
                const unsigned int fieldSize);

        //! Get the default scrambling polynomial for a field size
        template<typename Symbol>
        GS_API std::vector<Symbol> defaultScrambler(
                const unsigned int fieldSize,
                const unsigned int codewordLength,
                const unsigned int augmentingLength);

        //! Stuff needed for the GuidedScrambler and Descrambler blocks
        namespace GuidedScrambling
        {
            //! Starting RDS for codeword analysis
            const std::complex<double> startingRDS={0,0};

            //! Maximum field size defined
            const unsigned int maxFieldSize=16;
        }

        //! Path to data folder
        const char dataPath[] = "@CMAKE_INSTALL_PREFIX@/share/gr-gs/data";

        //! PSD Data Width
        const unsigned psdDataWidth = @DATA_FFT_WINDOW_SIZE@/2+1;

        //! Autocovariance Data Length
        const unsigned autocovarianceDataLength = @DATA_AUTOCOVARIANCE_LENGTH@;

        //! Distribution Data Width
        const unsigned distributionDataWidth = @DATA_DISTRIBUTION_WIDTH@;
    }
}

#endif
